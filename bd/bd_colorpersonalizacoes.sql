-- MySQL Script generated by MySQL Workbench
-- Tue Nov 26 14:14:04 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema bd_colorpersonalizacoes
-- -----------------------------------------------------
-- Data: 27/05/2019
-- Desenvolvedores: Cristian Eduardo, Gabriel Duessmann, Guilherme Razzini e Gustavo Maertner
-- Descrição: Banco de dados para gerenciar o sistema da empresa Color Personalizações.

-- -----------------------------------------------------
-- Schema bd_colorpersonalizacoes
--
-- Data: 27/05/2019
-- Desenvolvedores: Cristian Eduardo, Gabriel Duessmann, Guilherme Razzini e Gustavo Maertner
-- Descrição: Banco de dados para gerenciar o sistema da empresa Color Personalizações.
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bd_colorpersonalizacoes` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;
USE `bd_colorpersonalizacoes` ;

-- -----------------------------------------------------
-- Table `bd_colorpersonalizacoes`.`usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bd_colorpersonalizacoes`.`usuarios` ;

CREATE TABLE IF NOT EXISTS `bd_colorpersonalizacoes`.`usuarios` (
  `id` SMALLINT(5) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Campo responsável pelo código determinante do perfil do usuário.',
  `usuario` VARCHAR(50) NOT NULL COMMENT 'Campo responsável pelo nome de usuário do funcionário.',
  `senha` CHAR(32) NOT NULL COMMENT 'Campo responsável pela senha do usuário do funcionário.',
  `cpf` BIGINT(11) UNSIGNED ZEROFILL NOT NULL COMMENT 'Campo responsável pelo CPF do funcionário.',
  `nome` VARCHAR(70) NOT NULL COMMENT 'Campo responsável pelo nome completo do funcionário.',
  `graupermissao` TINYINT(3) UNSIGNED ZEROFILL NOT NULL COMMENT 'Campo responsável pelo grau de permissão do usuário do funcionário na empresa (Customizador, atendente e diretor).',
  `fone1` BIGINT(11) UNSIGNED NOT NULL COMMENT 'Campo responsável pelo telefone principal do funcionário.',
  `fone2` BIGINT(11) UNSIGNED NULL COMMENT 'Campo responsável pelo telefone secundário do funcionário, caso ele possua outro.',
  `email` VARCHAR(100) NOT NULL COMMENT 'Campo responsável pelo email do funcionário cadastrado no usuário.',
  `cep` INT(8) ZEROFILL NOT NULL COMMENT 'Campo responsável pelo CEP da residência do funcionário.',
  `rua` VARCHAR(100) NOT NULL COMMENT 'Campo responsável pela rua que o funcionário habita.',
  `numero` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'Campo responsável pelo número da casa/apartamento que o funcionário habita.\n',
  `cidade` VARCHAR(60) NOT NULL COMMENT 'Campo responsável pela cidade que o funcionário habita.',
  `bairro` VARCHAR(60) NOT NULL COMMENT 'Campo responsável pelo bairro que o funcionário habita.',
  `estado` CHAR(2) NOT NULL COMMENT 'Campo responsável pelo estado que o funcionário habita.',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `cpf_UNIQUE` (`cpf` ASC))
ENGINE = InnoDB
COMMENT = 'Tabela responsável por conter os usuários do site, sendo estes os funcionários.';


-- -----------------------------------------------------
-- Table `bd_colorpersonalizacoes`.`clientes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bd_colorpersonalizacoes`.`clientes` ;

CREATE TABLE IF NOT EXISTS `bd_colorpersonalizacoes`.`clientes` (
  `id` BIGINT(20) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Campo responsável por armazenar o id dos clientes.',
  `nome` VARCHAR(70) NOT NULL COMMENT 'Campo responsável por armazenar o nome dos clientes.',
  `cpf` BIGINT(11) UNSIGNED ZEROFILL NULL COMMENT 'Campo responsável por armazenar o CPF dos clientes.',
  `cnpj` BIGINT(14) UNSIGNED ZEROFILL NULL COMMENT 'Campo responsável por armazenar o CNPJ da empresa a que será prestado serviço.',
  `fone1` BIGINT(11) UNSIGNED NOT NULL COMMENT 'Campo responsável por armazenar o telefone principal dos clientes.',
  `fone2` BIGINT(11) UNSIGNED NULL COMMENT 'Campo responsável por armazenar o telefone secundário dos clientes, caso ele possua outro.',
  `inscricaoestadual` BIGINT(20) UNSIGNED NULL COMMENT 'Campo responsável por armazenar a inscrição estadual  das empresas.',
  `estado` CHAR(2) NOT NULL COMMENT 'Campo responsável por armazenar o estado dos clientes.',
  `cidade` VARCHAR(60) NOT NULL COMMENT 'Campo responsável por armazenar a cidade dos clientes.',
  `cep` INT(8) UNSIGNED ZEROFILL NOT NULL COMMENT 'Campo responsável por armazenar o CEP dos clientes.',
  `email` VARCHAR(100) NOT NULL COMMENT 'Campo responsável por armazenar o email dos clientes.',
  `numero` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'Campo responsável por armazenar o número da residência dos clientes.',
  `bairro` VARCHAR(60) NOT NULL COMMENT 'Campo responsável por armazenar o bairro da residência dos clientes.',
  `rua` VARCHAR(100) NOT NULL COMMENT 'Campo responsável por armazenar a rua da residência dos clientes.',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `cpf_UNIQUE` (`cpf` ASC),
  UNIQUE INDEX `cnpj_UNIQUE` (`cnpj` ASC),
  UNIQUE INDEX `inscricaoestadual_UNIQUE` (`inscricaoestadual` ASC))
ENGINE = InnoDB
COMMENT = 'Tabela responsável pelos dados cadastrais dos clientes das empresas.';


-- -----------------------------------------------------
-- Table `bd_colorpersonalizacoes`.`orcamentos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bd_colorpersonalizacoes`.`orcamentos` ;

CREATE TABLE IF NOT EXISTS `bd_colorpersonalizacoes`.`orcamentos` (
  `codigo` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Campo responsável por armazenar os códigos dos orçamentos.',
  `dataemissao` DATE NOT NULL COMMENT 'Campo responsável por armazenar as datas de emissão dos orçamentos.',
  `parcelas` TINYINT(2) UNSIGNED NULL COMMENT 'Campo responsável por armazenar as parcelas dos orçamentos.',
  `desconto` TINYINT(3) UNSIGNED NULL COMMENT 'Campo responsável por armazenar o descontos dos orçamentos.',
  `cidade` VARCHAR(60) NULL COMMENT 'Campo responsável por armazenar a cidade onde serão entregue os produtos dos orçamentos.',
  `cep` INT(8) UNSIGNED ZEROFILL NULL COMMENT 'Campo responsável por armazenar o CEP de onde serão entregues os produtos dos orçamentos.',
  `estado` CHAR(2) NULL COMMENT 'Campo responsável por armazenar o estado onde serão entregues os produtos dos orçamentos.',
  `rua` VARCHAR(100) NULL COMMENT 'Campo responsável por armazenar a rua onde serão entregues os produtos dos orçamentos.',
  `numero` SMALLINT(5) UNSIGNED NULL COMMENT 'Campo responsável por armazenar o número de onde serão entregues os produtos dos orçamentos.',
  `bairro` VARCHAR(60) NULL COMMENT 'Campo responsável por armazenar o bairro onde serão entregues os produtos dos orçamentos.',
  `usuarios_id` SMALLINT(5) UNSIGNED ZEROFILL NOT NULL COMMENT 'Campo responsável informar qual usuário foi responsável pelo orçamento.',
  `clientes_id` BIGINT(20) UNSIGNED ZEROFILL NOT NULL COMMENT 'Campo responsável por informar de qual cliente é o orçamento.',
  `status` TINYINT(2) UNSIGNED NOT NULL,
  PRIMARY KEY (`codigo`),
  INDEX `fk_orcamentos_usuarios_idx` (`usuarios_id` ASC),
  INDEX `fk_orcamentos_clientes1_idx` (`clientes_id` ASC),
  CONSTRAINT `fk_orcamentos_usuarios`
    FOREIGN KEY (`usuarios_id`)
    REFERENCES `bd_colorpersonalizacoes`.`usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_orcamentos_clientes1`
    FOREIGN KEY (`clientes_id`)
    REFERENCES `bd_colorpersonalizacoes`.`clientes` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela responsável por armazenar os orçamentos do sistema.';


-- -----------------------------------------------------
-- Table `bd_colorpersonalizacoes`.`ordensservicos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bd_colorpersonalizacoes`.`ordensservicos` ;

CREATE TABLE IF NOT EXISTS `bd_colorpersonalizacoes`.`ordensservicos` (
  `codigo` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Campo responsável por armazenar o códigos das ordens de serviço.',
  `status` TINYINT(2) UNSIGNED NOT NULL COMMENT 'Campo responsável por armazenar o status das ordens de serviço.',
  `dataemissao` DATE NOT NULL COMMENT 'Campo responsável por armazenar a data de emissão das ordens de serviço.',
  `dataentrega` DATE NOT NULL COMMENT 'Campo responsável por armazenar a data de entrega das ordens de serviço.',
  `orcamentos_codigo` INT(10) ZEROFILL UNSIGNED NOT NULL COMMENT 'Campo responsável por informar qual orçamento deu origem à ordem de serviço.',
  `usuarios_id` SMALLINT(5) UNSIGNED ZEROFILL NOT NULL COMMENT 'Campo responsável por informar qual usuário confirmou a ordem de serviço.',
  PRIMARY KEY (`codigo`),
  INDEX `fk_ordensservicos_orcamentos1_idx` (`orcamentos_codigo` ASC),
  INDEX `fk_ordensservicos_usuarios1_idx` (`usuarios_id` ASC),
  CONSTRAINT `fk_ordensservicos_orcamentos1`
    FOREIGN KEY (`orcamentos_codigo`)
    REFERENCES `bd_colorpersonalizacoes`.`orcamentos` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ordensservicos_usuarios1`
    FOREIGN KEY (`usuarios_id`)
    REFERENCES `bd_colorpersonalizacoes`.`usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela responsável por armazenar as ordens de serviço do sistema.';


-- -----------------------------------------------------
-- Table `bd_colorpersonalizacoes`.`categorias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bd_colorpersonalizacoes`.`categorias` ;

CREATE TABLE IF NOT EXISTS `bd_colorpersonalizacoes`.`categorias` (
  `codigo` TINYINT(3) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Campo responsável por armazenar o código das categorias.',
  `nome` VARCHAR(50) NOT NULL COMMENT 'Campo responsável por armazenar o nome das categorias.',
  `descricao` TEXT NULL COMMENT 'Campo responsável por armazenar a descrição de cada categoria.',
  PRIMARY KEY (`codigo`))
ENGINE = InnoDB
COMMENT = 'Tabela responsável pelas categorias dos produtos disponíveis na empresa.\n';


-- -----------------------------------------------------
-- Table `bd_colorpersonalizacoes`.`produtos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bd_colorpersonalizacoes`.`produtos` ;

CREATE TABLE IF NOT EXISTS `bd_colorpersonalizacoes`.`produtos` (
  `codigo` INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Campo responsável por armazenar o código dos produtos.',
  `nomeProduto` VARCHAR(100) NOT NULL COMMENT 'Campo responsável por armazenar o nome do produto.',
  `categorias_codigo` TINYINT(3) UNSIGNED ZEROFILL NOT NULL COMMENT 'Campo responsável por armazenar o código da categoria dos produtos.',
  `preco_unitario` DECIMAL(6,2) UNSIGNED NOT NULL,
  PRIMARY KEY (`codigo`),
  INDEX `fk_produtos_categorias1_idx` (`categorias_codigo` ASC),
  CONSTRAINT `fk_produtos_categorias1`
    FOREIGN KEY (`categorias_codigo`)
    REFERENCES `bd_colorpersonalizacoes`.`categorias` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela responsável pelos dados armazenados sobre os produtos desenvolvidos na empresa.';


-- -----------------------------------------------------
-- Table `bd_colorpersonalizacoes`.`orcamentos_has_produtos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bd_colorpersonalizacoes`.`orcamentos_has_produtos` ;

CREATE TABLE IF NOT EXISTS `bd_colorpersonalizacoes`.`orcamentos_has_produtos` (
  `orcamentos_codigo` INT(10) ZEROFILL UNSIGNED NOT NULL COMMENT 'Campo responsável pelo código determinante do orçamento que possui os determinados produtos.',
  `produtos_codigo` INT(10) UNSIGNED ZEROFILL NOT NULL COMMENT 'Campo responsável pelo código determinante do produto que está contido no orçamento.',
  `quantidade` TINYINT(3) UNSIGNED NOT NULL COMMENT 'Campo responsável pela quantidade de produtos no orçamento.',
  `precoatual` DECIMAL(6,2) UNSIGNED NOT NULL COMMENT 'Campo responsável pelo preço atual (unitário) do produto do orçamento.',
  `descricaoestampa` TEXT NULL COMMENT 'Campo responsável pela descrição sobre como deve ser a estampa no produto.',
  PRIMARY KEY (`orcamentos_codigo`, `produtos_codigo`),
  INDEX `fk_orcamentos_has_produtos_produtos1_idx` (`produtos_codigo` ASC),
  INDEX `fk_orcamentos_has_produtos_orcamentos1_idx` (`orcamentos_codigo` ASC),
  CONSTRAINT `fk_orcamentos_has_produtos_orcamentos1`
    FOREIGN KEY (`orcamentos_codigo`)
    REFERENCES `bd_colorpersonalizacoes`.`orcamentos` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_orcamentos_has_produtos_produtos1`
    FOREIGN KEY (`produtos_codigo`)
    REFERENCES `bd_colorpersonalizacoes`.`produtos` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela responsável por guardar e ligar o produto ao orçamento que o gerou.';



INSERT INTO `usuarios` (`id`, `usuario`, `senha`, `cpf`, `nome`, `graupermissao`, `fone1`, `fone2`, `email`, `cep`, `rua`, `numero`, `cidade`, `bairro`, `estado`) VALUES (NULL, 'adm', md5('12345678'), '87309176583', 'Simone S.', '1', '73920175483', NULL, 'simones@gmail.com', '47390087', 'Rua XV de Novembro', '249', 'Joinville', 'Bom Retiro', 'SC');


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
